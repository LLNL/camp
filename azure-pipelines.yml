variables:
  DO_BUILD: 'yes'
  DO_TEST: 'yes'
  DO_INSTALL: 'yes'
  COMPILER: 'g++'
  base_img: gcc
  ver: latest
  pre_cmd: true
  build_type: RelWithDebInfo
  # Disable cuda and hip tests since there are no GPUs on these platforms
  ctest_extra: "-E '(.*offload|blt.*smoke|cuda_.*|hip_.*|CampEvent|CampResource)'"
  cmake_extra: ""
  parallel: 4
  cmake_build_opts: "--build build --verbose --parallel $(parallel)"

jobs:
- job: Windows
  strategy:
    matrix:
      # shared:
      #   SHARED_ARGS: '-DBUILD_SHARED_LIBS=On -DCMAKE_CXX_FLAGS="/DRAJASHAREDDLL_EXPORTS" '
      static:
        SHARED_ARGS: '-DBUILD_SHARED_LIBS=Off'
  pool:
    vmImage: 'windows-2019'
  variables:
    CMAKE_EXTRA_FLAGS: '-DENABLE_WARNINGS_AS_ERRORS=Off -DBLT_CXX_STD="" -DCMAKE_CXX_STANDARD=17'
  steps:
  - checkout: self
    clean: boolean
    submodules: recursive
  - task: CMake@1
    inputs:
      workingDir: 'build'
      cmakeArgs: '$(CMAKE_EXTRA_FLAGS) $(SHARED_ARGS) ../'
  - task: CMake@1
    inputs:
      workingDir: 'build'
      cmakeArgs: '--build . --config Release --verbose --parallel $(parallel)'
  - task: CmdLine@2
    inputs:
      script: 'ctest.exe -T test -C Release'
      workingDirectory: 'build'
    condition: eq( variables['Agent.OS'], 'Windows_NT')
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'
- job: Docker
  timeoutInMinutes: 360
  strategy:
    matrix:
      gcc8-debug:
        base_img: gcc
        ver: 8
        cmake_extra: -DENABLE_WARNINGS_AS_ERRORS=On -DENABLE_COVERAGE=On
        build_type: Debug
      gcc8:
        base_img: gcc
        ver: 8
      gcc-latest:
        base_img: gcc
        ver: latest
        cmake_extra:
      clang10:
        base_img: clang
        compiler: clang++
        ver: 10.0.0
      clang10-debug:
        base_img: clang
        compiler: clang++
        ver: 10.0.0
        cmake_extra: -DCMAKE_CXX_FLAGS=-fsanitize=address
        build_type: Debug
      clang-latest:
        base_img: clang
        compiler: clang++
        ver: 13.0.0
      # NVIDIA no longer supports "latest", must update manually
      nvcc11:
        base_img: nvcc
        ver: 11.1.1
      nvcc11-debug:
        base_img: nvcc
        ver: 11.1.1
        build_type: Debug
      nvcc12:
        base_img: nvcc
        ver: 12.2.0
      rocm:
        base_img: rocm
        cmake_extra: -DROCM_PATH=/opt/rocm -DENABLE_HIP=On -DENABLE_OPENMP=Off -DENABLE_CUDA=Off
        compiler: /opt/rocm/llvm/bin/amdclang++
      sycl:
        base_img: oneapi
        compiler: dpcpp
  pool:
    vmImage: 'ubuntu-latest'
  variables:
    DOCKER_BUILDKIT: '1'
    CMAKE_EXTRA_FLAGS: '-DENABLE_DEVELOPER_BENCHMARKS=On -DENABLE_DEVELOPER_DEFAULTS=On -DCMAKE_CXX_STANDARD=11'
  steps:
  - checkout: self
    clean: boolean
    submodules: recursive
  - task: Docker@1
    inputs:
      containerRegistry: raja_ci_docker
      command: build
      dockerFile: 'Dockerfile'
      arguments: >-
        --target test
        --build-arg BASE_IMG
        --build-arg VER
        --build-arg COMPILER
        --build-arg PRE_CMD
        --build-arg BUILD_TYPE
        --build-arg CMAKE_EXTRA
        --build-arg CTEST_EXTRA
        --build-arg PARALLEL
        --build-arg CMAKE_BUILD_OPTS
    env:
        BASE_IMG: $(base_img)
        VER: $(ver)
        COMPILER: $(COMPILER)
        PRE_CMD: $(pre_cmd)
        BUILD_TYPE: $(build_type)
        CMAKE_EXTRA: $(cmake_extra)
        CTEST_EXTRA: $(ctest_extra)
        PARALLEL: $(parallel)
        CMAKE_BUILD_OPTS: $(cmake_build_opts)
  - script: |
      CID=$(docker create llnl/camp:$(Build.BuildId))
      echo ${CID}
      docker cp ${CID}:/home/axom/workspace/build local-build
      docker rm ${CID}
    displayName: 'Copy test artifacts'
    condition: ne( variables['docker_target'], 'nvcc')
  # - script: |
  #     bash <(curl -s https://raw.githubusercontent.com/codecov/codecov-bash/0b376529f626b50b7d4a9fb734e0e50d28b9b91e/codecov) >& /dev/null
  #   displayName: 'Upload code coverage'
  #   condition: eq( variables['docker_target'], 'gcc')
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'

- job: Mac
  pool:
    vmImage: 'macOS-latest'
  variables:
    CMAKE_EXTRA_FLAGS: '-DENABLE_OPENMP=Off'
  steps:
  - checkout: self
    clean: boolean
    submodules: recursive
  - task: CMake@1
    inputs:
      workingDir: 'build'
      cmakeArgs: '$(CMAKE_EXTRA_FLAGS) ../'
  - script: |
      cd build
      make
    displayName: 'OSX Build'
    condition: eq( variables['Agent.OS'], 'Darwin')
  - script: |
      cd build
      ctest -T test --output-on-failure
    displayName: 'OSX Test'
    condition: eq( variables['Agent.OS'], 'Darwin')
  - task: PublishTestResults@2
    inputs:
      testResultsFormat: 'cTest'
      testResultsFiles: '**/Test.xml'

